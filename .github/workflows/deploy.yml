name: Build and Deploy to GKE
on:
  push:
    branches:
      - master
env:
  PROJECT_ID: ${{ secrets.GKE_PROJECT }}
  GKE_CLUSTER: multi-cluster    # Add your cluster name here.
  GKE_ZONE: us-central1-c   # Add your cluster zone here.
  DEPLOYMENT_NAME: multi-k8s # Add your deployment name here.
  IMAGE: static-site


jobs:
  setup-build-publish-deploy:
    name: Setup, Build, Publish, and Deploy
    runs-on: ubuntu-latest
    environment: production
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Decrypt GPG file
        run: |
           gpg --quiet --batch --yes --decrypt --passphrase="${{ secrets.GPG_PASSPHRASE }}" --output service-account.json service-account.json.gpg

#      - id: 'auth'
#        name: 'Authenticate to Google Cloud'
#        uses: 'google-github-actions/auth@v0'
#        with:
#          credentials_json: 'service-account.json'
#
#      - name: Setup gcloud CLI
#        uses: google-github-actions/setup-gcloud@94337306dda8180d967a56932ceb4ddcf01edae7
#        with:
#          service_account_key: ${{ secrets.GKE_SA_KEY }}
#          project_id: ${{ secrets.GKE_PROJECT }}

      - run: curl https://sdk.cloud.google.com | bash > /dev/null
      - run: source $HOME/google-cloud-sdk/path.bash.inc
      - run: |
          sudo gcloud components update kubectl
      - run: |
          gcloud auth activate-service-account --key-file service-account.json

#
#      - name: Configure Docker to use the gcloud command-line tool as a credential
#        run: |-
#          gcloud --quiet auth configure-docker
#          # Get the GKE credentials so we can deploy to the cluster
          

      - uses: google-github-actions/get-gke-credentials@fb08709ba27618c31c09e014e1d8364b02e5042e
        with:
          cluster_name: ${{ env.GKE_CLUSTER }}
          location: ${{ env.GKE_ZONE }}
          credentials: ${{ secrets.GKE_SA_KEY }}

      # Build the Docker image
      - name: Build
        run: |-
          docker build \
          --tag "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA" \
          --build-arg GITHUB_SHA="$GITHUB_SHA" \
          --build-arg GITHUB_REF="$GITHUB_REF" \
          .

      # Push the Docker image to Google Container Registry
      - name: Publish
        run: |-
          docker push "gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA"

      # Deploy the Docker image to the GKE cluster
      - name: Deploy
        run: |-
          ./kustomize edit set image gcr.io/PROJECT_ID/IMAGE:TAG=gcr.io/$PROJECT_ID/$IMAGE:$GITHUB_SHA
          ./kustomize build . | kubectl apply -f -
          kubectl rollout status deployment/$DEPLOYMENT_NAME
          kubectl get services -o wide

      - run: docker login -u ${{ secrets.DOCKER_USERNAME }} -p ${{ secrets.DOCKER_PASSWORD }}
      - run: docker build -t dappilik/react-test -f ./client/Dockerfile.dev ./client
      - run: docker run -e CI=true dappilik/react-test npm test
      - run: docker build -t dappilik/multi-client ./client
      - run: docker build -t dappilik/multi-nginx ./nginx
      - run: docker build -t dappilik/multi-server ./server
      - run: docker build -t dappilik/multi-worker ./worker
      - run: docker push dappilik/multi-client
      - run: docker push dappilik/multi-nginx
      - run: docker push dappilik/multi-server
      - run: docker push dappilik/multi-worker

      - name: Generate deployment package
        run: zip -r deploy.zip . -x '*.git*'

      - name: Deploy to EB
        uses: einaregilsson/beanstalk-deploy@v20
        with:
          aws_access_key: ${{ secrets.AWS_ACCESS_KEY }}
          aws_secret_key: ${{ secrets.AWS_SECRET_KEY }}
          application_name: multi-docker
          environment_name: Multidocker-env
          existing_bucket_name: elasticbeanstalk-us-east-2-520597075946
          region: us-east-2
          version_label: ${{ github.sha }}
          deployment_package: deploy.zip